{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\tmart\\\\Documents\\\\hello-next\\\\components\\\\Game.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Board from './Board';\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true,\n      stepnumber: 0\n    };\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var history = this.state.history.slice(0, this.state.stepnumber + 1);\n      var current = history[history.length - 1];\n      var squares = current.squares.slice();\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        history: history.concat([{\n          squares: squares\n        }]),\n        xIsNext: !this.state.xIsNext,\n        stepnumber: history.length\n      });\n    }\n  }, {\n    key: \"jumpTo\",\n    value: function jumpTo(step) {\n      this.setState({\n        stepnumber: step,\n        xIsNext: step % 2 === 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var history = this.state.history;\n      var current = history[this.state.stepnumber];\n      var winner = calculateWinner(current.squares);\n      var moves = history.map(function (step, move) {\n        var desc = move ? 'Go to move #' + move : 'Go to game start';\n        return __jsx(\"li\", {\n          key: move,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, __jsx(\"button\", {\n          onClick: function onClick() {\n            return _this2.jumpTo(move);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, desc));\n      });\n      var status;\n\n      if (winner) {\n        status = 'Winner: ' + winner;\n      } else {\n        status = 'Next player ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      return __jsx(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(Board, {\n        squares: current.squares,\n        onClick: function onClick(i) {\n          return _this2.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, status), __jsx(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, moves)));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nfunction calculateWinner(squares) {\n  var lines = [[0, 1, 2], [3, 4, 5], [6, 7.8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var i = 0; i < lines.length; i++) {\n    var _lines$i = _slicedToArray(lines[i], 3),\n        a = _lines$i[0],\n        b = _lines$i[1],\n        c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/tmart/Documents/hello-next/components/Game.js"],"names":["React","Board","Game","props","state","history","squares","Array","fill","xIsNext","stepnumber","i","slice","current","length","calculateWinner","setState","concat","step","winner","moves","map","move","desc","jumpTo","status","handleClick","Component","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            xIsNext: true,\r\n            stepnumber: 0,\r\n        };\r\n    }\r\n  handleClick(i){\r\n      const history = this.state.history.slice(0,this.state.stepnumber + 1);\r\n      const current = history[history.length-1];\r\n      const squares = current.squares.slice();\r\n      if(calculateWinner(squares) || squares[i]) {\r\n          return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n          history: history.concat([{\r\n              squares: squares,\r\n          }]),\r\n          xIsNext: !this.state.xIsNext,\r\n          stepnumber: history.length,\r\n      });\r\n  }\r\n  jumpTo(step){\r\n      this.setState({\r\n          stepnumber: step,\r\n          xIsNext: (step%2) === 0,\r\n      });\r\n  }\r\n  render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepnumber];\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map((step,move) => {\r\n          const desc = move ?\r\n              'Go to move #' + move :\r\n              'Go to game start';\r\n          return(\r\n              <li key = {move}>\r\n                  <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n              </li>\r\n          );\r\n      });\r\n      let status;\r\n      if(winner){\r\n          status = 'Winner: ' + winner;\r\n      }\r\n      else{\r\n          status = 'Next player ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n              squares = {current.squares}\r\n              onClick = {(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7.8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6],\r\n    ];\r\n    for(let i = 0; i < lines.length; i++){\r\n        const [a,b,c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}